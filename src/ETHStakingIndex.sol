// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.22;

import { ERC20, IERC20 } from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";

contract ETHStakingIndex is Ownable, ERC20 {
    using SafeERC20 for IERC20;

    // Underlying LSD tokens
    IERC20 private constant stETH = IERC20(0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84);
    IERC20 private constant rETH = IERC20(0xae78736Cd615f374D3085123A210448E74Fc6393);
    IERC20 private constant cbETH = IERC20(0xBe9895146f7AF43049ca1c1AE358B0541Ea49704);

    uint256 private constant FEE = 1000; // 0.1% fee
    uint256 private constant FEE_PRECISION = 1_000_000; // ppm

    constructor() Ownable(msg.sender) ERC20("ETH Staking Index", "ETH-LSD-Index") { }

    // -------------------------------- FUNCTIONS --------------------------------

    /// @notice Mint an ETH-LSD-Index token
    /// @param amount - The amount of tokens to mint
    function mint(uint256 amount) external {
        stETH.safeTransferFrom(msg.sender, address(this), amount);
        rETH.safeTransferFrom(msg.sender, address(this), amount);
        cbETH.safeTransferFrom(msg.sender, address(this), amount);
        _mint(msg.sender, amount);
    }

    /// @notice Burn an ETH-LSD-Index token
    /// @param amount - The amount of tokens to Burn
    function burn(uint256 amount) external {
        IERC20(address(this)).safeTransferFrom(msg.sender, address(this), amount);
        _burn(address(this), amount);

        uint256 fee = calcFee(amount);
        stETH.transfer(msg.sender, amount - fee);
        rETH.transfer(msg.sender, amount - fee);
        cbETH.transfer(msg.sender, amount - fee);
    }

    /// @notice Owner withdraws fees from contract
    /// @dev Each ETH LSD equals the total supply, so we can just subtract the total supply from the
    /// balance. The balance will be slightly larger, from the 0.1% fee on burns
    function withdrawFees() external onlyOwner {
        uint256 stETHFees = stETH.balanceOf(address(this)) - totalSupply();
        uint256 rETHFees = rETH.balanceOf(address(this)) - totalSupply();
        uint256 cbETHFees = cbETH.balanceOf(address(this)) - totalSupply();
        stETH.transfer(msg.sender, stETHFees);
        rETH.transfer(msg.sender, rETHFees);
        cbETH.transfer(msg.sender, cbETHFees);
    }

    // -------------------------------- GETTERS --------------------------------

    /// @notice Calculate the fee on a burn
    function calcFee(uint256 amount) public pure returns (uint256) {
        return (amount * FEE) / FEE_PRECISION;
    }

    /// @notice Get the contract addresses of the underlying LSD tokens
    function indexTokens() external pure returns (address[] memory) {
        address[] memory tokens = new address[](3);
        tokens[0] = address(stETH);
        tokens[1] = address(rETH);
        tokens[2] = address(cbETH);
        return tokens;
    }
}
