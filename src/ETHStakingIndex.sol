// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.21;

import { ERC20, IERC20 } from "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import { SafeERC20 } from "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol";
import { Ownable } from "@openzeppelin/contracts/access/Ownable.sol";

// TODO Coding
// Simplified Index of 1 part rETH, stETH, and cbETH. IF TIME - rebalance based on price
// implement mint
// implement burn
// implement owner withdraw fees
// implenet getters - balance of each underlying asset, token shares of depositors,

// TODO Other
// Launch on Sepolia or other network for release, only make public after, since it will reveal purposeful bugs in
// commit history
// Add to README - room for improvements
// better asset rebalancing - bring one token, sell for others, rebalance, OR base it on price, not 1 unit of token
    // Which would require a price oracle
// save on gas with unchecked math
// Customizable by owner or governance the different types of ETH LSDs used (such as adding frxETH or removing cbETH)
// ADD notes on the contract itself - useful for people who want to hold all 3 assets of index, lowering exposure to 1

contract ETHStakingIndex is Ownable, ERC20 {
    using SafeERC20 for IERC20;

    // Underlying LSD tokens
    address public stETH = 0xae7ab96520DE3A18E5e111B5EaAb095312D7fE84;
    address public rETH = 0xae78736Cd615f374D3085123A210448E74Fc6393;
    address public cbETH = 0xBe9895146f7AF43049ca1c1AE358B0541Ea49704;

    mapping(address => uint256) public shares;

    constructor() Ownable(msg.sender) ERC20("ETH Staking Index", "ETH-LSD-Index") { }

    // -------------------------------- METHODS --------------------------------

    /// @notice Mint an ETH-LSD-Index token
    /// @param amount - The amount of tokens to mint
    /// @dev nil
    function mint(address to, uint256 amount) external {
        shares[msg.sender] += amount;
        _mint(to, amount);
    }

    function burn(address to, uint256 amount) external {
        // TODO
    }

    function withdrawFees() external onlyOwner {
        // TODO - withdraw excess of the 3 tokens
    }

    // -------------------------------- GETTERS --------------------------------
}
