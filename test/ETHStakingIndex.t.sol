// SPDX-License-Identifier: UNLICENSED
pragma solidity >=0.8.22 <0.9.0;

import { PRBTest } from "@prb/test/PRBTest.sol";
import { console2 } from "forge-std/console2.sol";
import { StdCheats } from "forge-std/StdCheats.sol";
import { ERC20, IERC20 } from "@openzeppelin/contracts/token/ERC20/ERC20.sol";

import { ETHStakingIndex } from "../src/ETHStakingIndex.sol";

/// @dev If this is your first time with Forge, read this tutorial in the Foundry Book:
/// https://book.getfoundry.sh/forge/writing-tests
contract ETHStakingIndexTest is PRBTest, StdCheats {
    ETHStakingIndex internal est;

    /// @dev A function invoked before each test case is run.
    function setUp() public virtual {
        // Instantiate the contract-under-test.
        est = new ETHStakingIndex();
    }

    /// @dev Make sure stETH, rETH, and cbETH addresses are setup correctly
    function test_indexTokens() external {
        address[] memory tokens = est.indexTokens();
        // string memory alchemyApiKey = vm.envOr("API_KEY_ALCHEMY", string("")); // TODO - remove
        vm.createSelectFork({ urlOrAlias: "mainnet", blockNumber: 18_823_119 });
        assertEq(ERC20(tokens[0]).symbol(), "stETH", "stETH address mismatch");
        assertEq(ERC20(tokens[1]).symbol(), "rETH", "rETH address mismatch");
        assertEq(ERC20(tokens[2]).symbol(), "cbETH", "cbETH address mismatch");
    }
}
